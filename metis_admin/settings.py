"""
Django settings for metis_admin project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-8gy15^z036tfb9a%#36tgy6ssb==3+@c1)1nh6@!fdowo$%e!n')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'  # Ge√ßici olarak True

# Railway deployment i√ßin host ayarlarƒ±
RAILWAY_STATIC_URL = os.environ.get('RAILWAY_STATIC_URL', '')
RAILWAY_PUBLIC_DOMAIN = os.environ.get('RAILWAY_PUBLIC_DOMAIN', '')

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '.railway.app',
    '.up.railway.app',
    'mestakip2.up.railway.app',
    '0.0.0.0',
]

# Railway domain varsa ekle
if RAILWAY_PUBLIC_DOMAIN:
    ALLOWED_HOSTS.append(RAILWAY_PUBLIC_DOMAIN)
    # Eƒüer tam domain verilmi≈üse, sadece domain kƒ±smƒ±nƒ± al
    if not RAILWAY_PUBLIC_DOMAIN.startswith('.'):
        ALLOWED_HOSTS.append(RAILWAY_PUBLIC_DOMAIN.split(':')[0])

# CSRF ayarlarƒ± - Railway t√ºm domainleri i√ßin izin ver
import re

# Railway domain'i al
railway_domain = os.environ.get('RAILWAY_PUBLIC_DOMAIN', '')
port = os.environ.get('PORT', '')

CSRF_TRUSTED_ORIGINS = [
    'https://*.railway.app',
    'https://*.up.railway.app',
]

# Eƒüer Railway domain varsa ekle
if railway_domain:
    # Domain'i temizle
    domain_clean = railway_domain.split(':')[0].split('@')[0]
    if not domain_clean.startswith('http'):
        CSRF_TRUSTED_ORIGINS.append(f'https://{domain_clean}')
    else:
        CSRF_TRUSTED_ORIGINS.append(domain_clean)

# Production i√ßin g√ºvenlik ayarlarƒ±
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    # Railway HTTPS otomatik olduƒüu i√ßin SSL redirect'i kapatƒ±yoruz
    SECURE_SSL_REDIRECT = False
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000  # 1 yƒ±l
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dashboard',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'metis_admin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'metis_admin.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration
import dj_database_url

# Railway PostgreSQL veya SQLite fallback
DATABASE_URL = os.environ.get('DATABASE_URL')

# Database ayarlarƒ± - Railway i√ßin g√º√ßlendirilmi≈ü
if DATABASE_URL:
    # Eƒüer PostgreSQL URL'i varsa kullan
    if DATABASE_URL.startswith('postgresql://') or DATABASE_URL.startswith('postgres://'):
        try:
            DATABASES = {
                'default': dj_database_url.parse(DATABASE_URL)
            }
            print("‚úÖ Using PostgreSQL database")
        except Exception as e:
            print(f"‚ùå DATABASE_URL parsing error: {e}")
            print(f"DATABASE_URL value: {DATABASE_URL[:50]}...")
            print("‚ö†Ô∏è  Falling back to SQLite")
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': BASE_DIR / 'db.sqlite3',
                }
            }
    else:
        print(f"‚ö†Ô∏è  DATABASE_URL doesn't look like PostgreSQL: {DATABASE_URL[:50]}...")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
else:
    # DATABASE_URL yoksa SQLite kullan
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    if os.environ.get('RAILWAY_ENVIRONMENT'):
        print("‚ö†Ô∏è  WARNING: Running on Railway but no DATABASE_URL found!")
        print("‚ö†Ô∏è  Please add a PostgreSQL database in Railway dashboard")

# Railway deployment i√ßin PostgreSQL ayarlarƒ± ve logging
RAILWAY_ENV = os.environ.get('RAILWAY_ENVIRONMENT')
if RAILWAY_ENV:
    print("üöÇ Railway environment detected!")
    print(f"üìä DATABASE_URL: {'Set' if DATABASE_URL else 'Not set'}")
    print(f"üîë SECRET_KEY: {'Set' if SECRET_KEY != 'django-insecure-8gy15^z036tfb9a%#36tgy6ssb==3+@c1)1nh6@!fdowo$%e!n' else 'Using default (change in production!)'}")
    print(f"üêõ DEBUG: {DEBUG}")
    
    if not DATABASE_URL or not DATABASE_URL.startswith('postgresql://'):
        print("‚ö†Ô∏è  WARNING: No valid PostgreSQL DATABASE_URL found")
        print("‚ö†Ô∏è  Please add a PostgreSQL database in Railway dashboard")
    else:
        print("‚úÖ PostgreSQL configuration looks good!")


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Istanbul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Static files directories
STATICFILES_DIRS = []
if os.path.exists(os.path.join(BASE_DIR, 'static')):
    STATICFILES_DIRS.append(os.path.join(BASE_DIR, 'static'))

# WhiteNoise configuration for Railway
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# WhiteNoise settings
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
